{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOASZUhdaSG0CgMaQ3+lRGx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Lesson 12: Perceptron**\n","---\n","**Name:** Dao Hoai Linh\n","\n","**Class:** 20PFIEV3\n","\n","**Student Code:** 123200107\n","\n"],"metadata":{"id":"Th-4FN5XBgkP"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-12xi8VVtyYr","executionInfo":{"status":"ok","timestamp":1711523044587,"user_tz":-420,"elapsed":57171,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"0122c61e-49c3-4a0a-f0e7-6e572a60b5b6"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["**SAMPLE:**"],"metadata":{"id":"_52lV3Kv4p4b"}},{"cell_type":"code","source":["import numpy as np\n","def pred(w, x):\n","    return np.sign(np.dot(w.T, x))\n","def has_converged(X, y, w):\n","    return np.array_equal(pred(w, X), y)\n","def perceptron(X, y, w_init):\n","    w = [w_init]\n","    d = X.shape[0]\n","    mis_points = []\n","    while True:\n","        # mix data\n","        mix_id = np.random.permutation(X.shape[1])\n","        converged = True\n","        for i in range(X.shape[1]):\n","            xi = X[:, mix_id[i]].reshape(d, 1)\n","            yi = y[0, mix_id[i]]\n","            if pred(w[-1], xi)[0] != yi:\n","                mis_points.append(mix_id[i])\n","                converged = False\n","                w_new = w[-1] + yi * xi\n","                w.append(w_new)\n","        if converged:\n","            break\n","    return (w, mis_points)\n","\n","if __name__ == '__main__':\n","    means = [[-1, 0], [1,0]]\n","    cov = [[.3, .2], [.2,.3]]\n","    N = 10\n","    X0 = np.random.multivariate_normal(means[0], cov, N).T\n","    X1 = np.random.multivariate_normal(means[1], cov, N).T\n","    X = np.concatenate((X0, X1), axis=1)\n","    y = np.concatenate((np.ones((1, N)), -1 * np.ones((1, N))), axis=1)\n","    # Xbar\n","    Xbar = np.concatenate((np.ones((1, 2 * N)), X), axis=0)\n","    w_init = np.random.randn(Xbar.shape[0], 1)\n","    (w, m) = perceptron(Xbar, y, w_init)\n","    print(w[-1].T)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"turPU1FI6UqA","executionInfo":{"status":"ok","timestamp":1711526214745,"user_tz":-420,"elapsed":356,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"8757f2c1-8a69-4ea1-a552-cd979280b2b2"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.02493143 -2.42883307  0.13571296]]\n"]}]},{"cell_type":"markdown","source":["**WORK:**\n","\n","Applying PLA (Perceptron Learning Algorithm) to the data file ('/content/drive/MyDrive/HoaiLinh_AI_folder/Single Layer Perceptron Dataset.csv')"],"metadata":{"id":"JUkLYgrBBXR-"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","def pred(w, x):\n","    return np.sign(np.dot(w.T, x))\n","\n","def perceptron(X, y, w_init, max_iter=10000):\n","    w = [w_init]\n","    d = X.shape[0]\n","    mis_points = []\n","    for _ in range(max_iter):\n","        mix_id = np.random.permutation(X.shape[1])\n","        converged = True\n","        for i in range(X.shape[1]):\n","            xi = X[:, mix_id[i]].reshape(d, 1)\n","            yi = y[mix_id[i]]\n","            if pred(w[-1], xi)[0] != yi:\n","                mis_points.append(mix_id[i])\n","                converged = False\n","                w_new = w[-1] + yi * xi\n","                w.append(w_new)\n","        if converged:\n","            break\n","    return (w, mis_points)\n","\n","if __name__ == '__main__':\n","    data = pd.read_csv(\"/content/drive/MyDrive/HoaiLinh_AI_folder/Single Layer Perceptron Dataset.csv\")\n","    data = data.dropna()\n","    X = data[['Feature1', 'Feature2', 'Feature3']].values.T\n","    y = data['Class_Label'].values\n","    print(\"Show the data:\")\n","    print(X)\n","    print(y)\n","    print('Show the final weight:')\n","    w_init = np.random.randn(X.shape[0], 1)\n","    (w, m) = perceptron(X, y, w_init)\n","    print(w[-1].T)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGdehxSfqkNe","executionInfo":{"status":"ok","timestamp":1711526870342,"user_tz":-420,"elapsed":1578,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"9c310096-c155-4cbb-8f87-effe08bec3c3"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["Show the data:\n","[[1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.   1.  ]\n"," [0.08 0.1  0.26 0.35 0.45 0.6  0.7  0.92 0.42 0.65 0.2  0.2  0.85]\n"," [0.72 1.   0.58 0.95 0.15 0.3  0.65 0.45 0.85 0.55 0.3  1.   0.1 ]]\n","[1. 1. 1. 0. 1. 1. 0. 0. 0. 0. 1. 0. 1.]\n","Show the final weight:\n","[[ 1.82944237 -0.84625708 -0.09636655]]\n"]}]}]}