{"cells":[{"cell_type":"markdown","metadata":{"id":"0nvZdxTdZ_fH"},"source":["# English-to-Francais translation with a sequence-to-sequence Transformer\n","\n","**Student:** DAO Hoai Linh vs LE Thi Hoai Luong<br>\n","**Reference:** [fchollet](https://twitter.com/fchollet)<br>\n","**Paper:** Attention is all you need<br>\n","**Date created:** 2023/04/10<br>\n","**Last modified:** 2023/04/10<br>\n","**Description:** Implementing a sequence-to-sequence Transformer and training it on a machine translation task."]},{"cell_type":"markdown","metadata":{"id":"ZoxvDZT0Z_fK"},"source":["## Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aCDxnV7iZ_fK"},"outputs":[],"source":["import os\n","import pathlib\n","import random\n","import string\n","import re\n","import numpy as np\n","import tensorflow as tf\n","import tensorflow.data as tf_data\n","import tensorflow.strings as tf_strings\n","\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import TextVectorization"]},{"cell_type":"markdown","metadata":{"id":"WZig1wowZ_fL"},"source":["## Downloading the data\n","\n","We'll be working with an English-to-Francais translation dataset\n","provided by [Anki](https://www.manythings.org/anki/). Let's download it:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"StaxqjZrZ_fL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712711268968,"user_tz":-420,"elapsed":894,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"7b597b76-1100-49a1-ddfd-8d102d1ab91c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from http://storage.googleapis.com/download.tensorflow.org/data/fra-eng.zip\n","3423204/3423204 [==============================] - 1s 0us/step\n"]}],"source":["text_file = keras.utils.get_file(\n","    fname=\"fra-eng.zip\",\n","    origin=\"http://storage.googleapis.com/download.tensorflow.org/data/fra-eng.zip\",\n","    extract=True,\n",")\n","text_file = pathlib.Path(text_file).parent / \"fra.txt\""]},{"cell_type":"markdown","metadata":{"id":"C1o5u7PXZ_fL"},"source":["## Parsing the data\n","\n","Each line contains an English sentence and its corresponding Francais sentence.\n","The English sentence is the *source sequence* and Francais one is the *target sequence*.\n","We prepend the token `\"[start]\"` and we append the token `\"[end]\"` to the Francais sentence."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sfhuOjeDZ_fM"},"outputs":[],"source":["with open(text_file) as f:\n","    lines = f.read().split(\"\\n\")[:-1]\n","text_pairs = []\n","for line in lines:\n","    eng, fra = line.split(\"\\t\")\n","    fra = \"[start] \" + fra + \" [end]\"\n","    text_pairs.append((eng, fra))"]},{"cell_type":"markdown","metadata":{"id":"-ORtDjNGZ_fM"},"source":["Here's what our sentence pairs look like:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QqIBFd9lZ_fM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712711279906,"user_tz":-420,"elapsed":3,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"7b4b6d7c-1432-421a-85d3-992ccff983d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["(\"I know that you've been through a lot.\", '[start] Je sais que vous avez traversé beaucoup de choses. [end]')\n","('Tom makes big money.', \"[start] Tom gagne beaucoup d'argent. [end]\")\n","('The conference takes place annually.', '[start] La conférence est annuelle. [end]')\n","('Thanks for joining us.', '[start] Merci de te joindre à nous. [end]')\n","('Microsoft has a completely new operating system in the works.', \"[start] Microsoft a un tout nouveau système d'exploitation dans ses cartons. [end]\")\n"]}],"source":["for _ in range(5):\n","    print(random.choice(text_pairs))"]},{"cell_type":"markdown","metadata":{"id":"h5iEfX2FZ_fM"},"source":["Now, let's split the sentence pairs into a training set, a validation set,\n","and a test set."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HwcdCejsZ_fM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712711288329,"user_tz":-420,"elapsed":748,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"a93bdfc1-a99e-4480-cc34-949146cd735b"},"outputs":[{"output_type":"stream","name":"stdout","text":["167130 total pairs\n","116992 training pairs\n","25069 validation pairs\n","25069 test pairs\n"]}],"source":["random.shuffle(text_pairs)\n","num_val_samples = int(0.15 * len(text_pairs))\n","num_train_samples = len(text_pairs) - 2 * num_val_samples\n","train_pairs = text_pairs[:num_train_samples]\n","val_pairs = text_pairs[num_train_samples : num_train_samples + num_val_samples]\n","test_pairs = text_pairs[num_train_samples + num_val_samples :]\n","\n","print(f\"{len(text_pairs)} total pairs\")\n","print(f\"{len(train_pairs)} training pairs\")\n","print(f\"{len(val_pairs)} validation pairs\")\n","print(f\"{len(test_pairs)} test pairs\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cJBHRBSAZ_fN"},"outputs":[],"source":["strip_chars = string.punctuation\n","strip_chars = strip_chars.replace(\"[\", \"\")\n","strip_chars = strip_chars.replace(\"]\", \"\")\n","\n","vocab_size = 15000\n","sequence_length = 20\n","batch_size = 64\n","\n","\n","def custom_standardization(input_string):\n","    lowercase = tf_strings.lower(input_string)\n","    return tf_strings.regex_replace(lowercase, \"[%s]\" % re.escape(strip_chars), \"\")\n","\n","\n","eng_vectorization = TextVectorization(\n","    max_tokens=vocab_size,\n","    output_mode=\"int\",\n","    output_sequence_length=sequence_length,\n",")\n","fra_vectorization = TextVectorization(\n","    max_tokens=vocab_size,\n","    output_mode=\"int\",\n","    output_sequence_length=sequence_length + 1,\n","    standardize=custom_standardization,\n",")\n","train_eng_texts = [pair[0] for pair in train_pairs]\n","train_fra_texts = [pair[1] for pair in train_pairs]\n","eng_vectorization.adapt(train_eng_texts)\n","fra_vectorization.adapt(train_fra_texts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TJmMMxuLZ_fN"},"outputs":[],"source":["def format_dataset(eng, fra):\n","    eng = eng_vectorization(eng)\n","    fra = fra_vectorization(fra)\n","    return (\n","        {\n","            \"encoder_inputs\": eng,\n","            \"decoder_inputs\": fra[:, :-1],\n","        },\n","        fra[:, 1:],\n","    )\n","\n","\n","def make_dataset(pairs):\n","    eng_texts, fra_texts = zip(*pairs)\n","    eng_texts = list(eng_texts)\n","    fra_texts = list(fra_texts)\n","    dataset = tf_data.Dataset.from_tensor_slices((eng_texts, fra_texts))\n","    dataset = dataset.batch(batch_size)\n","    dataset = dataset.map(format_dataset)\n","    return dataset.cache().shuffle(2048).prefetch(16)\n","\n","\n","train_ds = make_dataset(train_pairs)\n","val_ds = make_dataset(val_pairs)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gb4__XEVZ_fN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712711309170,"user_tz":-420,"elapsed":975,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"81a5e57a-184e-4b27-8dd3-d0d0db0ad90a"},"outputs":[{"output_type":"stream","name":"stdout","text":["inputs[\"encoder_inputs\"].shape: (64, 20)\n","inputs[\"decoder_inputs\"].shape: (64, 20)\n","targets.shape: (64, 20)\n"]}],"source":["for inputs, targets in train_ds.take(1):\n","    print(f'inputs[\"encoder_inputs\"].shape: {inputs[\"encoder_inputs\"].shape}')\n","    print(f'inputs[\"decoder_inputs\"].shape: {inputs[\"decoder_inputs\"].shape}')\n","    print(f\"targets.shape: {targets.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ehFjYtQHZ_fN"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","class TransformerEncoder(layers.Layer):\n","    def __init__(self, embed_dim, dense_dim, num_heads, **kwargs):\n","        super().__init__(**kwargs)\n","        self.embed_dim = embed_dim\n","        self.dense_dim = dense_dim\n","        self.num_heads = num_heads\n","        self.attention = layers.MultiHeadAttention(\n","            num_heads=num_heads, key_dim=embed_dim\n","        )\n","        self.dense_proj = keras.Sequential(\n","            [\n","                layers.Dense(dense_dim, activation=\"relu\"),\n","                layers.Dense(embed_dim),\n","            ]\n","        )\n","        self.layernorm_1 = layers.LayerNormalization()\n","        self.layernorm_2 = layers.LayerNormalization()\n","        self.supports_masking = True\n","\n","    def call(self, inputs, mask=None):\n","        if mask is not None:\n","            padding_mask = tf.cast(mask[:, None, :], dtype=\"int32\")\n","        else:\n","            padding_mask = None\n","\n","        attention_output = self.attention(\n","            query=inputs, value=inputs, key=inputs, attention_mask=padding_mask\n","        )\n","        proj_input = self.layernorm_1(inputs + attention_output)\n","        proj_output = self.dense_proj(proj_input)\n","        return self.layernorm_2(proj_input + proj_output)\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update(\n","            {\n","                \"embed_dim\": self.embed_dim,\n","                \"dense_dim\": self.dense_dim,\n","                \"num_heads\": self.num_heads,\n","            }\n","        )\n","        return config\n","\n","\n","class PositionalEmbedding(layers.Layer):\n","    def __init__(self, sequence_length, vocab_size, embed_dim, **kwargs):\n","        super().__init__(**kwargs)\n","        self.token_embeddings = layers.Embedding(\n","            input_dim=vocab_size, output_dim=embed_dim\n","        )\n","        self.position_embeddings = layers.Embedding(\n","            input_dim=sequence_length, output_dim=embed_dim\n","        )\n","        self.sequence_length = sequence_length\n","        self.vocab_size = vocab_size\n","        self.embed_dim = embed_dim\n","\n","    def call(self, inputs):\n","        length = tf.shape(inputs)[-1]\n","        positions = tf.range(0, length, dtype=tf.int32)\n","        embedded_tokens = self.token_embeddings(inputs)\n","        embedded_positions = self.position_embeddings(positions)\n","        return embedded_tokens + embedded_positions\n","\n","    def compute_mask(self, inputs, mask=None):\n","        if mask is None:\n","            return None\n","        else:\n","            return tf.not_equal(inputs, 0)\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update(\n","            {\n","                \"sequence_length\": self.sequence_length,\n","                \"vocab_size\": self.vocab_size,\n","                \"embed_dim\": self.embed_dim,\n","            }\n","        )\n","        return config\n","\n","\n","class TransformerDecoder(layers.Layer):\n","    def __init__(self, embed_dim, latent_dim, num_heads, **kwargs):\n","        super().__init__(**kwargs)\n","        self.embed_dim = embed_dim\n","        self.latent_dim = latent_dim\n","        self.num_heads = num_heads\n","        self.attention_1 = layers.MultiHeadAttention(\n","            num_heads=num_heads, key_dim=embed_dim\n","        )\n","        self.attention_2 = layers.MultiHeadAttention(\n","            num_heads=num_heads, key_dim=embed_dim\n","        )\n","        self.dense_proj = keras.Sequential(\n","            [\n","                layers.Dense(latent_dim, activation=\"relu\"),\n","                layers.Dense(embed_dim),\n","            ]\n","        )\n","        self.layernorm_1 = layers.LayerNormalization()\n","        self.layernorm_2 = layers.LayerNormalization()\n","        self.layernorm_3 = layers.LayerNormalization()\n","        self.supports_masking = True\n","\n","    def call(self, inputs, encoder_outputs, mask=None):\n","        causal_mask = self.get_causal_attention_mask(inputs)\n","        if mask is not None:\n","            padding_mask = tf.cast(mask[:, None, :], dtype=\"int32\")\n","            padding_mask = tf.minimum(padding_mask, causal_mask)\n","        else:\n","            padding_mask = None\n","\n","        attention_output_1 = self.attention_1(\n","            query=inputs, value=inputs, key=inputs, attention_mask=causal_mask\n","        )\n","        out_1 = self.layernorm_1(inputs + attention_output_1)\n","\n","        attention_output_2 = self.attention_2(\n","            query=out_1,\n","            value=encoder_outputs,\n","            key=encoder_outputs,\n","            attention_mask=padding_mask,\n","        )\n","        out_2 = self.layernorm_2(out_1 + attention_output_2)\n","\n","        proj_output = self.dense_proj(out_2)\n","        return self.layernorm_3(out_2 + proj_output)\n","\n","    def get_causal_attention_mask(self, inputs):\n","        input_shape = tf.shape(inputs)\n","        batch_size, sequence_length = input_shape[0], input_shape[1]\n","        i = tf.range(sequence_length)[:, None]\n","        j = tf.range(sequence_length)\n","        mask = tf.cast(i >= j, dtype=\"int32\")\n","        mask = tf.reshape(mask, (1, input_shape[1], input_shape[1]))\n","        mult = tf.concat(\n","            [tf.expand_dims(batch_size, -1), tf.constant([1, 1])],\n","            axis=0,\n","        )\n","        return tf.tile(mask, mult)\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update(\n","            {\n","                \"embed_dim\": self.embed_dim,\n","                \"latent_dim\": self.latent_dim,\n","                \"num_heads\": self.num_heads,\n","            }\n","        )\n","        return config\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sENuCQrpZ_fN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712711332490,"user_tz":-420,"elapsed":5075,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"485b98f9-0aa9-4b4b-aa8b-03da17b96e1e"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}],"source":["embed_dim = 256\n","latent_dim = 2048\n","num_heads = 8\n","\n","encoder_inputs = keras.Input(shape=(None,), dtype=\"int64\", name=\"encoder_inputs\")\n","x = PositionalEmbedding(sequence_length, vocab_size, embed_dim)(encoder_inputs)\n","encoder_outputs = TransformerEncoder(embed_dim, latent_dim, num_heads)(x)\n","encoder = keras.Model(encoder_inputs, encoder_outputs)\n","\n","decoder_inputs = keras.Input(shape=(None,), dtype=\"int64\", name=\"decoder_inputs\")\n","encoded_seq_inputs = keras.Input(shape=(None, embed_dim), name=\"decoder_state_inputs\")\n","x = PositionalEmbedding(sequence_length, vocab_size, embed_dim)(decoder_inputs)\n","x = TransformerDecoder(embed_dim, latent_dim, num_heads)(x, encoded_seq_inputs)\n","x = layers.Dropout(0.5)(x)\n","decoder_outputs = layers.Dense(vocab_size, activation=\"softmax\")(x)\n","decoder = keras.Model([decoder_inputs, encoded_seq_inputs], decoder_outputs)\n","\n","decoder_outputs = decoder([decoder_inputs, encoder_outputs])\n","transformer = keras.Model(\n","    [encoder_inputs, decoder_inputs], decoder_outputs, name=\"transformer\"\n",")\n","transformer.save_weights('weights.h5')\n","transformer.save('transformer_model')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vzc_g28YZ_fO","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1712714146723,"user_tz":-420,"elapsed":2488229,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"fcdd66f0-c056-4b96-b05c-332b82531c57"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","1828/1828 [==============================] - 135s 71ms/step - loss: 0.8089 - accuracy: 0.8600 - val_loss: 0.7410 - val_accuracy: 0.8687\n","Epoch 2/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.7356 - accuracy: 0.8704 - val_loss: 0.6922 - val_accuracy: 0.8758\n","Epoch 3/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.6881 - accuracy: 0.8777 - val_loss: 0.6813 - val_accuracy: 0.8772\n","Epoch 4/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.6547 - accuracy: 0.8830 - val_loss: 0.6713 - val_accuracy: 0.8798\n","Epoch 5/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.6295 - accuracy: 0.8871 - val_loss: 0.6655 - val_accuracy: 0.8811\n","Epoch 6/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.6105 - accuracy: 0.8906 - val_loss: 0.6662 - val_accuracy: 0.8838\n","Epoch 7/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5941 - accuracy: 0.8938 - val_loss: 0.6727 - val_accuracy: 0.8828\n","Epoch 8/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5805 - accuracy: 0.8963 - val_loss: 0.6676 - val_accuracy: 0.8852\n","Epoch 9/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5674 - accuracy: 0.8989 - val_loss: 0.6683 - val_accuracy: 0.8857\n","Epoch 10/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5572 - accuracy: 0.9011 - val_loss: 0.6652 - val_accuracy: 0.8874\n","Epoch 11/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5466 - accuracy: 0.9028 - val_loss: 0.6792 - val_accuracy: 0.8864\n","Epoch 12/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5363 - accuracy: 0.9051 - val_loss: 0.6781 - val_accuracy: 0.8869\n","Epoch 13/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5272 - accuracy: 0.9069 - val_loss: 0.6832 - val_accuracy: 0.8863\n","Epoch 14/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5182 - accuracy: 0.9086 - val_loss: 0.6955 - val_accuracy: 0.8870\n","Epoch 15/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5106 - accuracy: 0.9103 - val_loss: 0.7075 - val_accuracy: 0.8855\n","Epoch 16/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.5036 - accuracy: 0.9116 - val_loss: 0.6962 - val_accuracy: 0.8886\n","Epoch 17/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.4964 - accuracy: 0.9131 - val_loss: 0.7046 - val_accuracy: 0.8878\n","Epoch 18/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.4890 - accuracy: 0.9145 - val_loss: 0.7011 - val_accuracy: 0.8900\n","Epoch 19/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.4825 - accuracy: 0.9158 - val_loss: 0.7118 - val_accuracy: 0.8878\n","Epoch 20/20\n","1828/1828 [==============================] - 124s 68ms/step - loss: 0.4772 - accuracy: 0.9169 - val_loss: 0.7234 - val_accuracy: 0.8885\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["epochs = 20\n","\n","transformer.compile(\n","    optimizer=\"rmsprop\",\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"accuracy\"]\n",")\n","\n","history = transformer.fit(\n","    train_ds,\n","    epochs=epochs,\n","    validation_data=val_ds\n",")\n","\n","import matplotlib.pyplot as plt\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","accuracy = history.history['accuracy']\n","val_accuracy = history.history['val_accuracy']\n","\n","plt.figure(figsize=(12, 5))\n","plt.subplot(1, 2, 1)\n","plt.plot(range(epochs), loss, label='Training Loss')\n","plt.plot(range(epochs), val_loss, label='Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(range(epochs), accuracy, label='Training Accuracy')\n","plt.plot(range(epochs), val_accuracy, label='Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"code","source":["positional_embedding_layer = transformer.get_layer('positional_embedding')\n","encoder_token_embedding_weights = positional_embedding_layer.token_embeddings.get_weights()[0]"],"metadata":{"id":"6WzQjjzV9lcY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def word_embedding(word, word_vectorization, embedding_weights):\n","    word_index = word_vectorization.get_vocabulary().index(word)\n","    word_embedding = embedding_weights[word_index]\n","\n","    # print(f\"Word: {word}\")\n","\n","    # print(f\"Embedding Shape: {word_embedding.shape}\")\n","    return word_embedding"],"metadata":{"id":"DLLC6pjk9uvY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["word_embedding(\"hello\", eng_vectorization, encoder_token_embedding_weights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sSmK10z4KVlD","executionInfo":{"status":"ok","timestamp":1712714167069,"user_tz":-420,"elapsed":2,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"9207e294-2433-4ad0-8e5a-7d8d12a77084"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0.07218219,  0.00882274,  0.03107733,  0.00768054,  0.01458899,\n","        0.04715825,  0.01409105,  0.14330144,  0.01427955, -0.01438912,\n","       -0.04773597,  0.01569868, -0.09354902,  0.11944815, -0.16169612,\n","       -0.00197466, -0.06685217, -0.01333504,  0.13911027,  0.03681756,\n","        0.08086517,  0.02261391,  0.05940334, -0.00799411,  0.03070108,\n","       -0.01557268, -0.06925751,  0.06332012, -0.1028715 ,  0.07108159,\n","        0.07486789,  0.00832891,  0.00104726,  0.12291106,  0.06169479,\n","        0.00897178,  0.02764059,  0.10249791, -0.04575961, -0.08623851,\n","       -0.01844671, -0.08268777, -0.04545669, -0.00748948, -0.13732857,\n","       -0.03032908, -0.01286915, -0.02599092, -0.00614756,  0.04457153,\n","        0.0414476 , -0.01100011, -0.01378223,  0.00960541,  0.04835888,\n","        0.10345548,  0.07408993, -0.03092672,  0.10188366,  0.03256487,\n","        0.06312439, -0.0260158 ,  0.08688702, -0.05010399,  0.1107142 ,\n","        0.06035794, -0.00041291,  0.00940515,  0.0280916 ,  0.01596779,\n","       -0.070284  , -0.0243748 , -0.07195432, -0.1257843 , -0.0110004 ,\n","        0.11368214, -0.04266742,  0.01657458,  0.02778905, -0.04170743,\n","       -0.07080688,  0.03220622,  0.06996255,  0.07216256, -0.00886103,\n","        0.01950509, -0.09190695, -0.07512172, -0.06318475,  0.00591078,\n","        0.0219981 ,  0.00214892, -0.05623526,  0.05334874, -0.0301696 ,\n","       -0.0041483 ,  0.05946929,  0.03196367,  0.00784361,  0.08964256,\n","        0.03177602, -0.05034851,  0.07359465,  0.02941004,  0.04344521,\n","       -0.03319868, -0.03641353,  0.01846822,  0.04499711, -0.09564746,\n","        0.06569794, -0.06186352, -0.02606714,  0.02283313, -0.05018002,\n","       -0.10054368,  0.10064502,  0.04925654, -0.04677646, -0.01502737,\n","       -0.055192  ,  0.08097284, -0.05581987, -0.09713268,  0.02155161,\n","       -0.07369631,  0.11995482, -0.1893057 ,  0.00057445,  0.02298647,\n","        0.0143182 ,  0.07983012,  0.11456408,  0.03124432,  0.01056788,\n","        0.02575737,  0.08117581, -0.01423831,  0.05309704,  0.06790576,\n","        0.02034818, -0.05212206, -0.01224773, -0.07451442, -0.04712162,\n","       -0.04811917,  0.02692157,  0.03029226,  0.03056279,  0.04044182,\n","        0.00904865,  0.11245501,  0.02590223,  0.07023157, -0.03194981,\n","       -0.04943813, -0.12789305,  0.01050156,  0.22144939,  0.06646175,\n","       -0.09344921, -0.02263105, -0.07450674,  0.0577739 ,  0.04690541,\n","        0.01413679,  0.03432439, -0.00150926,  0.03487943, -0.06994888,\n","        0.1410872 ,  0.00741742,  0.04496767,  0.02630004,  0.00064789,\n","        0.03999816, -0.11472199, -0.02091095,  0.04906079, -0.05066098,\n","        0.01666065,  0.00273414,  0.00647393, -0.02091174,  0.01463961,\n","        0.03150797,  0.0242484 ,  0.01975986, -0.03164303, -0.03103404,\n","        0.04545879,  0.01758163,  0.04209034, -0.13416557, -0.07180221,\n","       -0.0046702 , -0.02319693, -0.06918246,  0.04886947,  0.13429496,\n","       -0.06988942, -0.04877429, -0.08244184, -0.05533365,  0.04975383,\n","       -0.1019695 ,  0.08136649, -0.00385412,  0.11963334, -0.06075785,\n","        0.03911108, -0.00142303,  0.21365167,  0.0324892 , -0.13222362,\n","        0.0523097 ,  0.13619544, -0.12936975,  0.04045926, -0.01921711,\n","       -0.05166624, -0.0281856 ,  0.03646741,  0.04711647, -0.01400959,\n","        0.06482285, -0.09199595,  0.02387581, -0.00633501, -0.01109589,\n","       -0.00765616, -0.07060577,  0.05796866, -0.02805586, -0.03469118,\n","       -0.03987589,  0.03070924,  0.01492739, -0.15362051, -0.15335473,\n","       -0.01668973, -0.02749868, -0.00459721,  0.0114446 ,  0.01890476,\n","       -0.11998925, -0.0287945 ,  0.11223394,  0.05886292,  0.05451943,\n","       -0.01504554, -0.00809029, -0.04476018, -0.10577611,  0.06496385,\n","        0.01027844], dtype=float32)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["from numpy import dot\n","from numpy.linalg import norm\n","\n","def cosine_similarity(vector_a, vector_b):\n","    similarity = dot(vector_a, vector_b) / (norm(vector_a) * norm(vector_b))\n","    return similarity"],"metadata":{"id":"MEVfxWsdLCv7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","vector_a = word_embedding(\"hi\", eng_vectorization, encoder_token_embedding_weights)\n","vector_b = word_embedding(\"hello\", eng_vectorization, encoder_token_embedding_weights)\n","\n","# cosine similarity\n","similarity = cosine_similarity(vector_a, vector_b)\n","print(f\"Cosine similarity: {similarity:.2f}\")\n","\n","plt.figure(figsize=(10, 6))\n","plt.bar(np.arange(len(vector_a)) - 0.15, vector_a, color='blue', width=0.3, label='Hello')\n","plt.bar(np.arange(len(vector_b)) + 0.15, vector_b, color='red', width=0.3, label='Hi')\n","plt.ylim(0, 1)\n","plt.title(f\"Word Embeddings Comparison\\nCosine Similarity: {similarity:.2f}\")\n","plt.xlabel(\"Dimension\")\n","plt.ylabel(\"Value\")\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":603},"id":"ENnoRCibLEQT","executionInfo":{"status":"ok","timestamp":1712714176311,"user_tz":-420,"elapsed":793,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"07859177-1615-4446-c34e-e7da99a893c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cosine similarity: 0.44\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pHt8RVhOZ_fO"},"outputs":[],"source":["fra_vocab = fra_vectorization.get_vocabulary()\n","fra_index_lookup = dict(zip(range(len(fra_vocab)), fra_vocab))\n","max_decoded_sentence_length = 20\n","\n","def decode_sequence(input_sentence):\n","    tokenized_input_sentence = eng_vectorization([input_sentence])\n","    decoded_sentence = \"[start]\"\n","    for i in range(max_decoded_sentence_length):\n","        tokenized_target_sentence = fra_vectorization([decoded_sentence])[:, :-1]\n","        predictions = transformer([tokenized_input_sentence, tokenized_target_sentence])\n","        sampled_token_index = tf.argmax(predictions[0, i, :], axis=-1).numpy().item()\n","        sampled_token = fra_index_lookup[sampled_token_index]\n","        decoded_sentence += \" \" + sampled_token\n","\n","        if sampled_token == \"[end]\":\n","            break\n","    return decoded_sentence\n","\n"]},{"cell_type":"code","source":["test_eng_texts = [pair[0] for pair in test_pairs]\n","for _ in range(30):\n","    input_sentence = random.choice(test_eng_texts)\n","    translated = decode_sequence(input_sentence)\n","    print(\"-\")\n","    print(input_sentence)\n","    print(translated)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rfGALyTwgbbt","executionInfo":{"status":"ok","timestamp":1712714202569,"user_tz":-420,"elapsed":12426,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"9ba63fbb-3697-4dca-9287-5f374abbc7d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-\n","I can't remember where we did that.\n","[start] je ne peux me rappeler où nous avons fait cela [end]\n","-\n","Do you sell desk lamps here?\n","[start] [UNK] ici [UNK] [end]\n","-\n","I know you considered me a close friend.\n","[start] je sais que tu me suis rendu une amie proche [end]\n","-\n","I'd never do what Tom did.\n","[start] je ne ferais jamais ce que tom a fait [end]\n","-\n","Don't trust him with such a large sum of money.\n","[start] ne lui faites pas confiance en une grosse somme dargent [end]\n","-\n","The world is small.\n","[start] le monde est petit [end]\n","-\n","Were you busy last week?\n","[start] Étaistu occupé la semaine [end]\n","-\n","You have changed a lot.\n","[start] tu as beaucoup changé [end]\n","-\n","Did we hit something?\n","[start] avonsnous frappé quelque chose [end]\n","-\n","That's what you all say.\n","[start] cest ce que tu dis tout [end]\n","-\n","You may use my pen at any time.\n","[start] tu peux me faire usage de mon stylo à tout moment [end]\n","-\n","She has no one to turn to.\n","[start] elle na personne pas le jusquà présent [end]\n","-\n","Bring me a cup of coffee, will you?\n","[start] [UNK] une tasse de café veuxtu [end]\n","-\n","I miss my friends.\n","[start] mes amis me sont des amis [end]\n","-\n","Wet clothes cling to the body.\n","[start] les vêtements [UNK] à la [UNK] [end]\n","-\n","This is foolish.\n","[start] cest idiot [end]\n","-\n","I sure am glad you weren't hurt.\n","[start] je me réjouis certainement que vous navez pas été blessé [end]\n","-\n","Am I that transparent?\n","[start] suisje aussi [UNK] [end]\n","-\n","This broken vase cannot be repaired.\n","[start] ce vase brisé ne peut pas faire réparer [end]\n","-\n","Do you want a little cake?\n","[start] voulezvous un peu de gâteau [end]\n","-\n","He had a second helping of soup.\n","[start] il a eu une soupe de main [end]\n","-\n","Are you busy today?\n","[start] estu occupée aujourdhui [end]\n","-\n","Tom told Mary he'd never lie to her.\n","[start] tom a dit à mary quil ne lui avait jamais [UNK] [end]\n","-\n","You can have this book for nothing.\n","[start] tu peux avoir ce livre pour rien [end]\n","-\n","Show me your papers!\n","[start] [UNK] tes papiers [end]\n","-\n","Are you vegetarian?\n","[start] estu [UNK] [end]\n","-\n","I was ushered to my seat.\n","[start] jai été [UNK] à mon siège [end]\n","-\n","You will save time if you adopt this new procedure.\n","[start] tu [UNK] à distance si tu [UNK] cette nouvelle [UNK] [end]\n","-\n","This milk tastes odd.\n","[start] ce lait a un goût bizarre [end]\n","-\n","I was in Boston last weekend.\n","[start] jétais à boston en train de la fin de la fin [end]\n"]}]},{"cell_type":"code","source":["def translate(english_sentence, transformer_model, eng_vectorization, fra_vectorization, max_decoded_sentence_length=20):\n","    tokenized_input_sentence = eng_vectorization([english_sentence])\n","    decoded_sentence = \"[start]\"\n","    for i in range(max_decoded_sentence_length):\n","        tokenized_target_sentence = fra_vectorization([decoded_sentence])[:, :-1]\n","        predictions = transformer_model([tokenized_input_sentence, tokenized_target_sentence])\n","        sampled_token_index = tf.argmax(predictions[0, i, :], axis=-1).numpy().item()\n","        sampled_token = fra_vectorization.get_vocabulary()[sampled_token_index]\n","        decoded_sentence += \" \" + sampled_token\n","\n","        if sampled_token == \"[end]\":\n","            break\n","    return decoded_sentence.replace(\"[start]\", \"\").replace(\"[end]\", \"\").strip()"],"metadata":{"id":"31A16ejUwe1D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["english_sentence = \"Hello, My name is Tom\"\n","translated_sentence = translate(english_sentence, transformer, eng_vectorization, fra_vectorization)\n","print(\"Tiếng Anh:\", english_sentence)\n","print(\"Tiếng Pháp:\", translated_sentence)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PJ84WGB0wyFC","executionInfo":{"status":"ok","timestamp":1712714677678,"user_tz":-420,"elapsed":500,"user":{"displayName":"Hoài Linh Đào","userId":"06427991247119097271"}},"outputId":"5d221b52-43ef-4f3d-b1a1-cb6358e69470"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Tiếng Anh: Hello, My name is Tom\n","Tiếng Pháp: bonjour mon nom est tom\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/neural_machine_translation_with_transformer.ipynb","timestamp":1712692157889}],"machine_shape":"hm","gpuType":"T4","toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}